// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum AdminStatus {
  Active @map("active")

  @@map("admin_status")
}

model Admin {
  id           Int         @id @default(autoincrement())
  firstname    String
  lastname     String
  email        String      @unique
  profileImage String?     @map("profile_image")
  status       AdminStatus @default(Active)
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  meta         AdminMeta?

  @@map("admin")
}

model AdminMeta {
  passwordSalt String? @map("password_salt")
  passwordHash String? @map("password_hash")
  admin        Admin   @relation(fields: [adminId], references: [id])
  adminId      Int     @unique() @map("admin_id")

  @@map("admin_meta")
}

enum UserStatus {
  Active  @map("active")
  Blocked @map("blocked")

  @@map("user_status")
}

enum ProductStatus {
  Active  @map("active")
  Blocked @map("blocked")

  @@map("product_status")
}

model User {
  id             Int             @id @default(autoincrement())
  firstname      String
  lastname       String
  username       String?         @unique
  email          String          @unique
  dialCode       String?         @map("dial_code")
  mobile         String?         @unique
  profileImage   String?         @map("profile_image")
  isVerified     Boolean         @default(false) @map("is_verified")
  country        String?
  status         UserStatus      @default(Active)
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  meta           UserMeta?
  settings       UserSetting[]
  masterAccounts MasterAccount[] @relation("UserToMaster")
  // Receipt       Receipt[]
  // Voucher       Voucher[]
  // MasterAccount  MasterAccount[]

  @@map("user")
}

model UserMeta {
  googleId     String? @unique @map("google_id")
  passwordSalt String? @map("password_salt")
  passwordHash String? @map("password_hash")
  user         User    @relation(fields: [userId], references: [id])
  userId       Int     @unique() @map("user_id")

  @@map("user_meta")
}

enum OtpTransport {
  Email  @map("email")
  Mobile @map("mobile")

  @@map("otp_transport")
}

model Otp {
  code             String
  attempt          Int          @default(1) @db.SmallInt
  lastSentAt       DateTime     @default(now()) @map("last_sent_at")
  retries          Int          @default(0) @db.SmallInt
  transport        OtpTransport
  target           String
  lastCodeVerified Boolean      @default(false) @map("last_code_verified")
  blocked          Boolean      @default(false)

  @@unique([transport, target])
  @@map("otp")
}

enum SettingType {
  Binary       @map("binary")
  MultiSelect  @map("multi_select")
  SingleSelect @map("single_select")

  @@map("setting_type")
}

enum SettingContext {
  User   @map("user")
  System @map("System")

  @@map("setting_context")
}

model Setting {
  id               Int             @id @default(autoincrement())
  mappedTo         String          @map("mapped_to")
  text             String          @default("")
  description      String          @default("")
  type             SettingType
  context          SettingContext
  default          Json
  isDefinedOptions Boolean         @map("is_defined_options")
  subSettings      Setting[]       @relation("SubSettings")
  dependsOn        Setting?        @relation("SubSettings", fields: [parentId], references: [id])
  parentId         Int?            @map("parent_id")
  options          SettingOption[]
  userSettings     UserSetting[]
  systemSettings   SystemSetting[]

  @@unique([context, mappedTo])
  @@map("setting")
}

model SettingOption {
  id        Int     @id @default(autoincrement())
  text      String  @default("")
  value     String
  setting   Setting @relation(fields: [settingId], references: [id])
  settingId Int     @map("setting_id")

  @@unique([settingId, value])
  @@map("setting_option")
}

model UserSetting {
  selection Json
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @map("user_id")
  setting   Setting @relation(fields: [settingId], references: [id])
  settingId Int     @map("setting_id")

  @@id([userId, settingId])
  @@map("user_setting")
}

model SystemSetting {
  selection Json
  setting   Setting @relation(fields: [settingId], references: [id])
  settingId Int     @map("setting_id")

  @@id([settingId])
  @@map("system_setting")
}

model MasterAccount {
  id                Int           @id @default(autoincrement())
  accountHolderName String
  createdAt         DateTime?     @default(now()) @map("created_at")
  updatedAt         DateTime?     @updatedAt @map("updated_at")
  subAccounts       SubAccount[]  @relation("MasterToSub")
  transactions      Transaction[] @relation("MasterToTransaction")
  // userId            Int?          @map("user_id")
  // user              User?         @relation(fields: [userId], references: [id])

  User User[] @relation("UserToMaster")
}

model SubAccount {
  id              Int           @id @default(autoincrement())
  masterAccountId Int
  bankName        String
  createdAt       DateTime?     @default(now()) @map("created_at")
  updatedAt       DateTime?     @updatedAt @map("updated_at")
  masterAccount   MasterAccount @relation(fields: [masterAccountId], references: [id], name: "MasterToSub")
  transactions    Transaction[] @relation("SubToTransaction")
}

model Receipt {
  id           Int           @id @default(autoincrement())
  amount       Decimal
  description  String
  isAssigned   Boolean       @default(false)
  date         DateTime      @db.Date
  transactions Transaction[] @relation("ReceiptToTransaction")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  Voucher      Voucher[]

  @@map("receipt")
}

model Voucher {
  id           Int           @id @default(autoincrement())
  amount       Decimal
  description  String
  date         DateTime      @db.Date
  transactions Transaction[] @relation("VoucherToTransaction")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @map("updated_at")
  receipt      Receipt?      @relation(fields: [receiptId], references: [id])
  receiptId    Int?          @map("receipt_id")

  // user         User          @relation(fields: [userId], references: [id])
  @@map("voucher")
}

model Transaction {
  id              Int            @id @default(autoincrement())
  amount          Decimal
  receiptId       Int?
  voucherId       Int?
  subAccountId    Int?
  adat            Float?
  commission      Float?
  entryType       EntryType
  entryId         Int?
  referenceId     String?
  masterAccountId Int?
  receipt         Receipt?       @relation(fields: [receiptId], references: [id], name: "ReceiptToTransaction")
  voucher         Voucher?       @relation(fields: [voucherId], references: [id], name: "VoucherToTransaction")
  subAccount      SubAccount?    @relation(fields: [subAccountId], references: [id], name: "SubToTransaction")
  masterAccount   MasterAccount? @relation(fields: [masterAccountId], references: [id], name: "MasterToTransaction")
}

enum EntryType {
  DEBIT
  CREDIT
}

enum RoleType {
  USER
  ADMIN
}

model ProductGender {
  genderId   Int               @id @default(autoincrement())
  genderName String            @map("gender_name")
  categories ProductCategory[] @relation("GenderCategories")
}

model ProductCategory {
  categoryId     Int             @id @default(autoincrement())
  fieldName      String          @map("field_name")
  fieldImage     String?         @map("field_image")
  productGender  ProductGender[] @relation("GenderCategories")
  products       Product[]       @relation("CategoryProducts")
  sizeCategoryId Int?            @map("size_category_id")
  sizeCategory   SizeCategory?   @relation(fields: [sizeCategoryId], references: [sizeCategoryId])
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
}

model Product {
  productId          Int              @id @default(autoincrement())
  productName        String           @map("product_name")
  categoryId         Int?             @map("category_id")
  productDescription String?          @map("product_description")
  status             ProductStatus    @default(Active)
  productCategory    ProductCategory? @relation("CategoryProducts", fields: [categoryId], references: [categoryId])
  productItems       ProductItem[]
  brand              Brand?           @relation(fields: [brandId], references: [brandId])
  brandId            Int?             @map("brand_id")
  tag                Tag?             @relation("ProductTags", fields: [tagId], references: [tagId]) // Updated
  tagId              Int?             @map("tag_id")
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")

  @@map("products")
}

model Tag {
  tagId    Int       @id @default(autoincrement())
  name     String?   @unique
  products Product[] @relation("ProductTags")
}

model Brand {
  brandId   Int       @id @default(autoincrement())
  brandName String?   @map("brand_name")
  product   Product[]
}

model Colour {
  colourId     Int           @id @default(autoincrement())
  colourName   String?       @map("colour_name")
  productItems ProductItem[]
}

model ProductImage {
  imageId     Int          @id @default(autoincrement())
  imageUrl    String?      @map("image_url")
  itemId      Int?         @map("item_id")
  productItem ProductItem? @relation(fields: [itemId], references: [itemId])
}

model SizeCategory {
  sizeCategoryId  Int               @id @default(autoincrement()) @map("size_category_id")
  categoryName    String            @map("category_name")
  sizeOption      SizeOption[]
  ProductCategory ProductCategory[]
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
}

model SizeOption {
  sizeId          Int               @id @default(autoincrement())
  sizeName        String            @map("size_name")
  sortOrder       Int               @map("size_order")
  productVaration ProductVaration[]
  sizeCategoryId  Int?
  sizeCategory    SizeCategory?     @relation(fields: [sizeCategoryId], references: [sizeCategoryId])
  productItems    ProductItem[]
}

model ProductVaration {
  variationId   Int          @id @default(autoincrement())
  productItem   ProductItem? @relation(fields: [itemId], references: [itemId])
  itemId        Int?         @map("item_id")
  sizeOption    SizeOption?  @relation(fields: [sizeId], references: [sizeId])
  sizeId        Int?         @map("size_id")
  quantityStock Int          @map("quantity_stock")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
}

model ProductItem {
  itemId          Int               @id @default(autoincrement())
  originalPrice   Int               @map("original_price")
  salePrice       Int?              @map("sale_price")
  productCode     Int               @map("product_code")
  productId       Int?              @map("product_id")
  product         Product?          @relation(fields: [productId], references: [productId])
  colourId        Int?              @map("colour_id")
  colour          Colour?           @relation(fields: [colourId], references: [colourId])
  productImages   ProductImage[]
  sizeId          Int?              @map("size_id")
  sizeOption      SizeOption?       @relation(fields: [sizeId], references: [sizeId])
  productVaration ProductVaration[]
  styleId         Int?              @map("style_id")
  style           Style?            @relation(fields: [styleId], references: [styleId])
  neckLineId      Int?              @map("neck_line_id")
  neckLine        NeckLine?         @relation(fields: [neckLineId], references: [neckLineId])
  sleeveId        Int?              @map("sleeve_id")
  sleeveLength    SleeveLength?     @relation(fields: [sleeveId], references: [sleeveId])
  seasonId        Int?              @map("season_id")
  season          Season?           @relation(fields: [seasonId], references: [seasonId])
  lengthId        Int?              @map("length_id")
  length          Length?           @relation(fields: [lengthId], references: [lengthId])
  bodyId          Int?              @map("body_id")
  bodyFit         BodyFit?          @relation(fields: [bodyId], references: [bodyId])
  dressId         Int?              @map("dress_id")
  dressType       DressType?        @relation(fields: [dressId], references: [dressId])
}

model Style {
  styleId     Int           @id @default(autoincrement())
  name        String?
  ProductItem ProductItem[]
}

model NeckLine {
  neckLineId  Int           @id @default(autoincrement())
  name        String?
  ProductItem ProductItem[]
}

model SleeveLength {
  sleeveId    Int           @id @default(autoincrement())
  name        String?
  ProductItem ProductItem[]
}

model Season {
  seasonId    Int           @id @default(autoincrement())
  name        String?
  ProductItem ProductItem[]
}

model Length {
  lengthId    Int           @id @default(autoincrement())
  name        String?
  ProductItem ProductItem[]
}

model BodyFit {
  bodyId      Int           @id @default(autoincrement())
  name        String?
  ProductItem ProductItem[]
}

model DressType {
  dressId     Int           @id @default(autoincrement())
  name        String?
  ProductItem ProductItem[]
}
